package com.indrasoft.configservices.gui;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.indrasoft.configservices.services.Services;
import com.intellij.uiDesigner.core.*;
import com.sun.org.apache.bcel.internal.generic.NEW;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.Optional;

/**
 * @Author laosiyao
 * @Date 2020/10/9 2:25 下午.
 */
public class ConfigSercivesWindow extends JFrame implements ActionListener {

    Logger logger = LoggerFactory.getLogger(ConfigSercivesWindow.class);
    private final ObjectMapper objectMapper = new ObjectMapper();
    public static final String LocalTxt = "./customParams.txt";

    private JPanel panel;
    private JButton rootPathChooseButton;
    private JTextField rootPathShowText;
    private JButton mvlPathChooseButton;
    private JTextField mvlPathShowText;
    private JButton outputPathChooseButton;
    private JTextField outputPathShowText;
    private JButton fileChooseButton;
    private JTextField fileShowText;
    private JButton exportButton;

    private JFileChooser pathChooser = new JFileChooser();

    public ConfigSercivesWindow() {
        this.setTitle("导表工具");
        this.setContentPane(panel);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        double hori = Toolkit.getDefaultToolkit().getScreenSize().getWidth() / 2;
        double verti = Toolkit.getDefaultToolkit().getScreenSize().getHeight() / 2;
        this.setLocation((int)Math.round(hori), (int)Math.round(verti));
        this.pack();
        this.setVisible(true);

        this.rootPathChooseButton.addActionListener(this);
        this.fileChooseButton.addActionListener(this);
        this.outputPathChooseButton.addActionListener(this);
        this.mvlPathChooseButton.addActionListener(this);
        this.exportButton.addActionListener(this);

        readLocal();

    }

    private void tipSuccess() {
        JOptionPane.showMessageDialog(panel,
                "处理完成", "提示",
                JOptionPane.INFORMATION_MESSAGE);
    }

    private void tipError(String msg) {
        JOptionPane.showMessageDialog(panel,
                msg, "提示",
                JOptionPane.ERROR_MESSAGE);
    }

    public static void main(String[] args) {
        new ConfigSercivesWindow();
    }

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel.setForeground(new Color(-6702172));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel.add(panel1, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        exportButton = new JButton();
        exportButton.setIconTextGap(6);
        exportButton.setMargin(new Insets(0, 0, 0, 0));
        exportButton.setMaximumSize(new Dimension(130, 50));
        exportButton.setMinimumSize(new Dimension(200, 50));
        exportButton.setText("解析并导出");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel1.add(exportButton, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel.add(panel2, new GridConstraints(0, 0, 4, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        rootPathChooseButton = new JButton();
        rootPathChooseButton.setText("根目录");
        panel2.add(rootPathChooseButton, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                false));
        mvlPathChooseButton = new JButton();
        mvlPathChooseButton.setText("mvl根目录(可选)");
        mvlPathChooseButton.setToolTipText("可留空，默认用\"根目录\"");
        panel2.add(mvlPathChooseButton, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                false));
        outputPathChooseButton = new JButton();
        outputPathChooseButton.setText("输出根目录(可选)");
        outputPathChooseButton.setToolTipText("可留空，默认用\"根目录\"");
        panel2.add(outputPathChooseButton, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                false));
        fileChooseButton = new JButton();
        fileChooseButton.setText("需导出的配置文件");
        fileChooseButton.setToolTipText("可选择文件夹");
        panel2.add(fileChooseButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0,
                false));
        rootPathShowText = new JTextField();
        panel2.add(rootPathShowText,
                new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, new Dimension(250, -1), new Dimension(300, -1), null, 0, false));
        mvlPathShowText = new JTextField();
        panel2.add(mvlPathShowText,
                new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        outputPathShowText = new JTextField();
        panel2.add(outputPathShowText,
                new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        fileShowText = new JTextField();
        panel2.add(fileShowText,
                new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW,
                        GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        logger.info("accept action {}", e);
        if (e.getSource() == this.rootPathChooseButton) {
            //            this.tipSuccess();
            if (!this.rootPathShowText.getText().isEmpty()) {
                this.pathChooser.setCurrentDirectory(new File(this.rootPathShowText.getText()));
            }
            this.pathChooser.setDialogTitle("请选择根目录...");
            this.pathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            pathChooser.setVisible(true);

            int result = pathChooser.showOpenDialog(this);
            if (JFileChooser.APPROVE_OPTION == result) {
                String path = pathChooser.getSelectedFile().getPath();
                rootPathShowText.setText(path);
            }
        } else if (e.getSource() == this.mvlPathChooseButton) {
            if (!this.mvlPathShowText.getText().isEmpty()) {
                this.pathChooser.setCurrentDirectory(new File(this.mvlPathShowText.getText()));
            }
            this.pathChooser.setDialogTitle("请选择mvl根目录...");
            this.pathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            pathChooser.setVisible(true);

            int result = pathChooser.showOpenDialog(this);
            if (JFileChooser.APPROVE_OPTION == result) {
                String path = pathChooser.getSelectedFile().getPath();
                mvlPathShowText.setText(path);
            }
        } else if (e.getSource() == this.outputPathChooseButton) {
            if (!this.outputPathShowText.getText().isEmpty()) {
                this.pathChooser.setCurrentDirectory(new File(this.outputPathShowText.getText()));
            }
            this.pathChooser.setDialogTitle("请选择导出文件根目录...");
            this.pathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            pathChooser.setVisible(true);

            int result = pathChooser.showOpenDialog(this);
            if (JFileChooser.APPROVE_OPTION == result) {
                String path = pathChooser.getSelectedFile().getPath();
                outputPathShowText.setText(path);
            }
        } else if (e.getSource() == this.fileChooseButton) {
            if (!this.fileShowText.getText().isEmpty()) {
                this.pathChooser.setCurrentDirectory(new File(this.fileShowText.getText()));
            }
            this.pathChooser.setDialogTitle("请选择需导出的文件或文件夹...");
            this.pathChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            pathChooser.setVisible(true);

            int result = pathChooser.showOpenDialog(this);
            if (JFileChooser.APPROVE_OPTION == result) {
                String path = pathChooser.getSelectedFile().getPath();
                fileShowText.setText(path);
            }
        } else if (e.getSource() == this.exportButton) {
            String rootPath = rootPathShowText.getText();
            String mvlPath = StringUtils.isEmpty(mvlPathShowText.getText()) ? rootPath : mvlPathShowText.getText();
            String outputPath = StringUtils.isEmpty(outputPathShowText.getText()) ? rootPath : outputPathShowText.getText();
            String filePath = fileShowText.getText();
            logger.info("do export  rootPath={}  mvlPath={}  outputPath={}  filePath={} ", rootPath, mvlPath, outputPath, filePath);

            if (StringUtils.isEmpty(mvlPath) || StringUtils.isEmpty(outputPath) || StringUtils.isEmpty(filePath)) {
                tipError("请选择mvl根目录|输出根目录|需要导出的文件或文件夹...");
            } else {
                Optional<String> result = Services.execute(mvlPath, outputPath, filePath);
                if (result.isPresent()) {
                    tipError(result.get());
                } else {
                    tipSuccess();
                }
            }

        }

        save2Local();
    }

    public static class LocalInfo {

        public String rootPath;
        public String mvlRootPath;
        public String outputRootPath;
        public String filePath;

        public LocalInfo() {
        }

        LocalInfo(String rootPath, String mvlRootPath, String outputRootPath, String filePath) {
            this.rootPath = rootPath;
            this.mvlRootPath = mvlRootPath;
            this.outputRootPath = outputRootPath;
            this.filePath = filePath;
        }

        void setRootPath(String rootPath) {
            this.rootPath = rootPath;
        }

        void setMvlRootPath(String mvlRootPath) {
            this.mvlRootPath = mvlRootPath;
        }

        void setOutputRootPath(String outputRootPath) {
            this.outputRootPath = outputRootPath;
        }

        void setFilePath(String filePath) {
            this.filePath = filePath;
        }

    }

    private void save2Local() {
        LocalInfo info = new LocalInfo(rootPathShowText.getText(), mvlPathShowText.getText(), outputPathShowText.getText(), fileShowText.getText());
        File file = new File(LocalTxt);
        try {
            objectMapper.writeValue(file, info);
        } catch (IOException e) {
            logger.error("{}", e);
        }
    }

    private void readLocal() {
        File file = new File(LocalTxt);
        try {
            LocalInfo info = objectMapper.readValue(file, LocalInfo.class);
            rootPathShowText.setText(info.rootPath);
            mvlPathShowText.setText(info.mvlRootPath);
            outputPathShowText.setText(info.outputRootPath);
            fileShowText.setText(info.filePath);
        } catch (IOException e) {
            logger.error("{}", e);
        }
    }

}
